#!/usr/bin/env python

# Copyright (c) 2013 Louis Taylor <kragniz@gmail.com>
# This work is free. You can redistribute it and/or modify it under the
# terms of the Do What The Fuck You Want To Public License, Version 2,
# as published by Sam Hocevar. See the COPYING file for more details.

import praw
import json
import re
import time
from collections import OrderedDict
from os.path import abspath
from praw.models import Message

class Responder(object):
    def __init__(self, configFilename = 'config.json'):
        self.log('Loading config from', abspath(configFilename))
        config = json.load(open(configFilename),
                           object_pairs_hook=OrderedDict)
        self.username = config['username']
        self.password = config['password']

        self.actions = OrderedDict()
        for r, message in config['responses'].iteritems():
            self.actions[re.compile(r, re.IGNORECASE)] = message
        self.log('Loaded', len(self.actions), 'actions')

        self._r = praw.Reddit('Auto responder bot by /u/kragniz')
        self._r.login(self.username, self.password)

        self.messages = []

    def has_messages(self):
        self.messages = []
        for item in self._r.inbox.unread(limit=None):
            if isinstance(item, Message):
                self.messages.append(item)
        
        return len(self.messages) > 0

    def respond(self, message):
        for r, messageText in self.actions.iteritems():
            if r.match(message.body):
                self.log('New message from:', message.author)
                self.log('Subject:', message.subject)
                self.log('Body:', message.body)
                #message.reply(messageText)
                #message.mark_as_read()
                break

    def respond_to_messages(self):
        for m in self.messages:
            self.respond(m)

    def log(self, *args):
        print '\033[94m' + time.asctime() + '\033[0m',
        print ' '.join([str(s) for s in args]) + '\033[0m'

if __name__ == '__main__':
    r = Responder()
    while True:
        try:
            time.sleep(10)
            if r.has_messages():
                r.respond_to_messages()
        except Exception, e:
            print r.log('Error raised:', e)
